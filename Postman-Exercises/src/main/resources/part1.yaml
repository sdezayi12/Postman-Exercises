openapi: 3.0.1
info:
  title: PART1
  description: The API aids the efficient management of book inventory, authors, and customer orders for an online bookstore. It provides endpoints for interacting with resources such as authors, books, and orders, enabling operations such as retrieval, creation, updating, and deletion.
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: Localhost server
tags:
  - name: authors
    description: Everything about the authors
  - name: books
    description: All our books
  - name: orders
    description: Management of customer orders
paths:
  /authors:
    get:
      tags:
        - authors
      summary: Lists all authors
      description: Retrieve all authors registered in the system.
      operationId: listAllAuthors
      responses:
        '200':
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: No authors found
    post:
      tags:
        - authors
      summary: Adds a new author
      description: Add a new author to the system
      operationId: addAuthor
      requestBody:
        description: Create a new author in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorAdd'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
        '409':
          description: Author already exists

  /authors/{id}:
    get:
      tags:
        - authors
      summary: Retrieves a specific author
      description: Retrieve details of a specific author by ID.
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          description: ID of the author to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    
    put:
      tags:
        - authors
      summary: Updates a specific author
      description: Updates details of a specific author by ID
      operationId: updateAuthorById
      parameters:
        - name: id
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad request
        '404':
          description: Author not found
    
    delete:
      tags:
        - authors
      summary: Deletes a specific author
      description: Delete a specific author by ID
      operationId: deleteAuthorById
      parameters:
        - name: id
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Author not found
  
  /authors/{id}/books:
    get:
      tags:
        - authors
      summary: Lists all books written by specific author
      description: Lists all books written by a specific author by ID
      operationId: listAuthorBooksById
      parameters:
        - name: id
          in: path
          description: ID of the author whose books are listed
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Author not found

  /books:
    get:
      tags:
        - books
      summary: Lists all books
      description: Retrieves a list of all books available.
      operationId: listAllBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags:
      - books
      summary: Creates a new book
      description: Adds a new book to the inventory.
      operationId: createBook
      requestBody:
        description: Book details to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Invalid request body"

  /books/{ISBN}:
    get:
      tags:
      - books
      summary: Retrieves a specific book
      description: Gets details of a specific book by its ISBN.
      operationId: getBookByISBN
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    put:
      tags:
      - books
      summary: Updates a specific book
      description: Updates details of a specific book by its ISBN.
      operationId: updateBookByISBN
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated book details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    delete:
      tags:
      - books
      summary: Deletes a specific book
      description: Deletes a specific book by its ISBN.
      operationId: deleteBookByISBN
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Book not found

  /books/{ISBN}/authors:
    get:
      tags:
      - books
      summary: Lists all authors of a book
      description: Retrieves the list of authors for a specific book by its ISBN.
      operationId: listAuthorsOfBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to retrieve authors
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Book not found

  /books/{ISBN}/orders:
    get:
      tags:
      - books
      summary: Lists all orders containing a specific book
      description: Retrieves the list of orders containing a specific book by its ISBN.
      operationId: listOrdersContainingBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to retrieve orders
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Book not found

  /orders:
    get:
      tags:
        - orders
      summary: Lists all orders
      description: Retrieves a list of all orders.
      operationId: listAllOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found

    post:
      tags:
        - orders
      summary: Creates a new order
      description: Creates a new order.
      operationId: createOrder
      requestBody:
        description: Order details to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Invalid request body"

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Retrieves a specific order
      description: Retrieves details of a specific order by its ID.
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      tags:
        - orders
      summary: Updates a specific order
      description: Updates details of a specific order by its ID.
      operationId: updateOrderById
      parameters:
        - name: id
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated order details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '404':
          description: Order not found

  /orders/{id}/books:
    get:
      tags:
        - orders
      summary: Lists all books in an order
      description: Retrieves a list of all books in a specific order by its ID.
      operationId: listBooksInOrder
      parameters:
        - name: id
          in: path
          description: ID of the order to retrieve books from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Order not found or no books in the order

    post:
      tags:
        - orders
      summary: Adds a book to an existing order
      description: Adds a new book to an existing order.
      operationId: addBookToOrder
      parameters:
        - name: id
          in: path
          description: ID of the order to add the book to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book details to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Invalid request body"

  /orders/{id}/books/{ISBN}:
    delete:
      tags:
        - orders
      summary: Removes a book from an existing order
      description: Removes a book from an existing order.
      operationId: removeBookFromOrder
      parameters:
        - name: id
          in: path
          description: ID of the order to remove the book from
          required: true
          schema:
            type: integer
            format: int64
        - name: ISBN
          in: path
          description: ISBN of the book to be removed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order or book not found



          
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John Doe
        birthyear:
          type: integer
          format: int32
          example: 1985
        nationality:
          type: string
          example: American
      xml:
        name: author

    AuthorAdd:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        birthyear:
          type: integer
          format: int32
          example: 1985
        nationality:
          type: string
          example: American
      required:
        - name
        - birthyear
        - nationality

    Book:
      type: object
      properties:
        ISBN:
          type: string
          format: int64
          example: 10
        title:
          type: string
          example: The Art of Programming
        publicationYear:
          type: integer
          format: int32
          example: 2003
        price:
          type: number
          format: double
          example: 25.00
      required:
        - ISBN
        - title
        - publicationYear
        - price

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        datetime:
          type: string
          format: date-time
          example: "2024-04-01T12:00:00Z"
        customerName:
          type: string
          example: Jane Doe
      required:
        - id
        - datetime
        - customerName